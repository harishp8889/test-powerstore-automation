// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	csi "github.com/container-storage-interface/spec/lib/go/csi"
	fs "github.com/dell/csi-powerstore/v2/pkg/identifiers/fs"

	logrus "github.com/sirupsen/logrus"

	mock "github.com/stretchr/testify/mock"
)

// VolumeStager is an autogenerated mock type for the VolumeStager type
type VolumeStager struct {
	mock.Mock
}

// Stage provides a mock function with given fields: ctx, req, logFields, _a3, id, isRemote
func (_m *VolumeStager) Stage(ctx context.Context, req *csi.NodeStageVolumeRequest, logFields logrus.Fields, _a3 fs.Interface, id string, isRemote bool) (*csi.NodeStageVolumeResponse, error) {
	ret := _m.Called(ctx, req, logFields, _a3, id, isRemote)

	if len(ret) == 0 {
		panic("no return value specified for Stage")
	}

	var r0 *csi.NodeStageVolumeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *csi.NodeStageVolumeRequest, logrus.Fields, fs.Interface, string, bool) (*csi.NodeStageVolumeResponse, error)); ok {
		return rf(ctx, req, logFields, _a3, id, isRemote)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *csi.NodeStageVolumeRequest, logrus.Fields, fs.Interface, string, bool) *csi.NodeStageVolumeResponse); ok {
		r0 = rf(ctx, req, logFields, _a3, id, isRemote)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csi.NodeStageVolumeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *csi.NodeStageVolumeRequest, logrus.Fields, fs.Interface, string, bool) error); ok {
		r1 = rf(ctx, req, logFields, _a3, id, isRemote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVolumeStager creates a new instance of VolumeStager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVolumeStager(t interface {
	mock.TestingT
	Cleanup(func())
}) *VolumeStager {
	mock := &VolumeStager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
