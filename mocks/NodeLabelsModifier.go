/*
 Copyright (c) 2025 Dell Inc, or its subsidiaries.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// NodeLabelsModifierInterface is an autogenerated mock type for the NodeLabelsModifierInterface type
type NodeLabelsModifierInterface struct {
	mock.Mock
}

// AddNVMeLabels provides a mock function with given fields: ctx, kubeNodeName
func (_m *NodeLabelsModifierInterface) AddNVMeLabels(ctx context.Context, kubeNodeName string, labelKey string, labelValue []string) error {
	ret := _m.Called(ctx, kubeNodeName, labelKey, labelValue)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) error); ok {
		return rf(ctx, kubeNodeName, labelKey, labelValue)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string)); ok {
		rf(ctx, kubeNodeName, labelKey, labelValue)
	}

	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) error); ok {
		r0 = rf(ctx, kubeNodeName, labelKey, labelValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNodeLabelsModifierInterface creates a new instance of NodeLabelsModifierInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeLabelsModifierInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeLabelsModifierInterface {
	mock := &NodeLabelsModifierInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
