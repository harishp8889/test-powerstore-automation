// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	gobrick "github.com/dell/gobrick"
	mock "github.com/stretchr/testify/mock"
)

// FcConnector is an autogenerated mock type for the FcConnector type
type FcConnector struct {
	mock.Mock
}

// ConnectVolume provides a mock function with given fields: ctx, info
func (_m *FcConnector) ConnectVolume(ctx context.Context, info gobrick.FCVolumeInfo) (gobrick.Device, error) {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for ConnectVolume")
	}

	var r0 gobrick.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gobrick.FCVolumeInfo) (gobrick.Device, error)); ok {
		return rf(ctx, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gobrick.FCVolumeInfo) gobrick.Device); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Get(0).(gobrick.Device)
	}

	if rf, ok := ret.Get(1).(func(context.Context, gobrick.FCVolumeInfo) error); ok {
		r1 = rf(ctx, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisconnectVolumeByDeviceName provides a mock function with given fields: ctx, name
func (_m *FcConnector) DisconnectVolumeByDeviceName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DisconnectVolumeByDeviceName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInitiatorPorts provides a mock function with given fields: ctx
func (_m *FcConnector) GetInitiatorPorts(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetInitiatorPorts")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFcConnector creates a new instance of FcConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFcConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *FcConnector {
	mock := &FcConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
