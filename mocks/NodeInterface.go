/*
 *
 * Copyright Â© 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csi-powerstore/v2/pkg/node (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/NodeInterface.go -package=mocks github.com/dell/csi-powerstore/v2/pkg/node Interface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	csi "github.com/container-storage-interface/spec/lib/go/csi"
	array "github.com/dell/csi-powerstore/v2/pkg/array"
	fs "github.com/dell/csi-powerstore/v2/pkg/common/fs"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Arrays mocks base method.
func (m *MockInterface) Arrays() map[string]*array.PowerStoreArray {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Arrays")
	ret0, _ := ret[0].(map[string]*array.PowerStoreArray)
	return ret0
}

// Arrays indicates an expected call of Arrays.
func (mr *MockInterfaceMockRecorder) Arrays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Arrays", reflect.TypeOf((*MockInterface)(nil).Arrays))
}

// DefaultArray mocks base method.
func (m *MockInterface) DefaultArray() *array.PowerStoreArray {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultArray")
	ret0, _ := ret[0].(*array.PowerStoreArray)
	return ret0
}

// DefaultArray indicates an expected call of DefaultArray.
func (mr *MockInterfaceMockRecorder) DefaultArray() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultArray", reflect.TypeOf((*MockInterface)(nil).DefaultArray))
}

// NodeExpandVolume mocks base method.
func (m *MockInterface) NodeExpandVolume(arg0 context.Context, arg1 *csi.NodeExpandVolumeRequest) (*csi.NodeExpandVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeExpandVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodeExpandVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeExpandVolume indicates an expected call of NodeExpandVolume.
func (mr *MockInterfaceMockRecorder) NodeExpandVolume(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeExpandVolume", reflect.TypeOf((*MockInterface)(nil).NodeExpandVolume), arg0, arg1)
}

// NodeGetCapabilities mocks base method.
func (m *MockInterface) NodeGetCapabilities(arg0 context.Context, arg1 *csi.NodeGetCapabilitiesRequest) (*csi.NodeGetCapabilitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeGetCapabilities", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodeGetCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeGetCapabilities indicates an expected call of NodeGetCapabilities.
func (mr *MockInterfaceMockRecorder) NodeGetCapabilities(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeGetCapabilities", reflect.TypeOf((*MockInterface)(nil).NodeGetCapabilities), arg0, arg1)
}

// NodeGetInfo mocks base method.
func (m *MockInterface) NodeGetInfo(arg0 context.Context, arg1 *csi.NodeGetInfoRequest) (*csi.NodeGetInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeGetInfo", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodeGetInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeGetInfo indicates an expected call of NodeGetInfo.
func (mr *MockInterfaceMockRecorder) NodeGetInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeGetInfo", reflect.TypeOf((*MockInterface)(nil).NodeGetInfo), arg0, arg1)
}

// NodeGetVolumeStats mocks base method.
func (m *MockInterface) NodeGetVolumeStats(arg0 context.Context, arg1 *csi.NodeGetVolumeStatsRequest) (*csi.NodeGetVolumeStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeGetVolumeStats", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodeGetVolumeStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeGetVolumeStats indicates an expected call of NodeGetVolumeStats.
func (mr *MockInterfaceMockRecorder) NodeGetVolumeStats(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeGetVolumeStats", reflect.TypeOf((*MockInterface)(nil).NodeGetVolumeStats), arg0, arg1)
}

// NodePublishVolume mocks base method.
func (m *MockInterface) NodePublishVolume(arg0 context.Context, arg1 *csi.NodePublishVolumeRequest) (*csi.NodePublishVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodePublishVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodePublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodePublishVolume indicates an expected call of NodePublishVolume.
func (mr *MockInterfaceMockRecorder) NodePublishVolume(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodePublishVolume", reflect.TypeOf((*MockInterface)(nil).NodePublishVolume), arg0, arg1)
}

// NodeStageVolume mocks base method.
func (m *MockInterface) NodeStageVolume(arg0 context.Context, arg1 *csi.NodeStageVolumeRequest) (*csi.NodeStageVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeStageVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodeStageVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeStageVolume indicates an expected call of NodeStageVolume.
func (mr *MockInterfaceMockRecorder) NodeStageVolume(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeStageVolume", reflect.TypeOf((*MockInterface)(nil).NodeStageVolume), arg0, arg1)
}

// NodeUnpublishVolume mocks base method.
func (m *MockInterface) NodeUnpublishVolume(arg0 context.Context, arg1 *csi.NodeUnpublishVolumeRequest) (*csi.NodeUnpublishVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeUnpublishVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodeUnpublishVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeUnpublishVolume indicates an expected call of NodeUnpublishVolume.
func (mr *MockInterfaceMockRecorder) NodeUnpublishVolume(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeUnpublishVolume", reflect.TypeOf((*MockInterface)(nil).NodeUnpublishVolume), arg0, arg1)
}

// NodeUnstageVolume mocks base method.
func (m *MockInterface) NodeUnstageVolume(arg0 context.Context, arg1 *csi.NodeUnstageVolumeRequest) (*csi.NodeUnstageVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeUnstageVolume", arg0, arg1)
	ret0, _ := ret[0].(*csi.NodeUnstageVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeUnstageVolume indicates an expected call of NodeUnstageVolume.
func (mr *MockInterfaceMockRecorder) NodeUnstageVolume(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeUnstageVolume", reflect.TypeOf((*MockInterface)(nil).NodeUnstageVolume), arg0, arg1)
}

// SetArrays mocks base method.
func (m *MockInterface) SetArrays(arg0 map[string]*array.PowerStoreArray) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetArrays", arg0)
}

// SetArrays indicates an expected call of SetArrays.
func (mr *MockInterfaceMockRecorder) SetArrays(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArrays", reflect.TypeOf((*MockInterface)(nil).SetArrays), arg0)
}

// SetDefaultArray mocks base method.
func (m *MockInterface) SetDefaultArray(arg0 *array.PowerStoreArray) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefaultArray", arg0)
}

// SetDefaultArray indicates an expected call of SetDefaultArray.
func (mr *MockInterfaceMockRecorder) SetDefaultArray(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultArray", reflect.TypeOf((*MockInterface)(nil).SetDefaultArray), arg0)
}

// UpdateArrays mocks base method.
func (m *MockInterface) UpdateArrays(arg0 string, arg1 fs.Interface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArrays", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArrays indicates an expected call of UpdateArrays.
func (mr *MockInterfaceMockRecorder) UpdateArrays(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArrays", reflect.TypeOf((*MockInterface)(nil).UpdateArrays), arg0, arg1)
}
